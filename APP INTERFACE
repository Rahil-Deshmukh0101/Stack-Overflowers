import streamlit as st
import numpy as np
import pandas as pd
import random
from datetime import datetime, timedelta

# Set page title and icon
st.set_page_config(page_title="AI Investment Bot", page_icon="📈", layout="wide")

# Sidebar - Wallet and Investment Settings
st.sidebar.header("💰 Wallet & Investment Settings")
initial_balance = st.sidebar.number_input("Initial Wallet Balance (₹)", min_value=0, value=50000, step=1000)
investment_percentage = st.sidebar.slider("Auto Deduction (% of salary)", 0, 100, 10)
investment_goal = st.sidebar.number_input("Investment Goal (₹ per month)", min_value=1000, value=10000, step=1000)
risk_level = st.sidebar.radio("Select Risk Level", ["Conservative", "Balanced", "Aggressive"], index=1)

# AI Investment Bot Title
st.title("🤖 AI-Powered Investment Bot")
st.subheader("Hassle-free investments with AI-driven strategies")

# Generate Fake Market Data
def generate_market_data():
    dates = [datetime.today() - timedelta(days=i) for i in range(30)]
    prices = [random.uniform(90, 110) for _ in range(30)]
    return pd.DataFrame({"Date": dates, "Price": prices})

data = generate_market_data()

# Display Market Trends
st.markdown("### 📊 Market Trends & AI Insights")
st.line_chart(data.set_index("Date"))

# Investment Simulation
def simulate_investment(balance, percentage, goal, risk):
    returns = {"Conservative": 0.04, "Balanced": 0.08, "Aggressive": 0.15}
    annual_return = returns[risk]
    monthly_return = (1 + annual_return) ** (1/12) - 1
    months = 12
    balance_series = [balance]
    
    for _ in range(months):
        investment = (balance * percentage) / 100
        balance += investment + (investment * monthly_return)
        balance_series.append(balance)
    
    return balance_series

# Perform Investment Simulation
simulated_data = simulate_investment(initial_balance, investment_percentage, investment_goal, risk_level)

data_simulation = pd.DataFrame({"Month": list(range(13)), "Balance": simulated_data})

st.markdown("### 📈 Projected Investment Growth")
st.line_chart(data_simulation.set_index("Month"))

# Freeze or Withdraw Funds
st.markdown("### 🔒 Fail-Safe Mode")
freeze = st.button("Freeze Investments")
withdraw = st.button("Withdraw Funds")
if freeze:
    st.warning("Investments Frozen! No further auto-investments will be made.")
if withdraw:
    st.success("Funds Withdrawn! Your current balance is secured.")

# Gamification Badges
st.markdown("### 🎖️ Gamification & Rewards")
badges = ["Starter Investor", "Consistent Saver", "Smart Investor", "Market Guru"]
st.write(f"🏆 You have earned: {random.choice(badges)}")

st.markdown("---")
st.caption("Powered by AI | Secure | Adaptive Strategies")
